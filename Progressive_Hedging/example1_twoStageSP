using CPLEX, JuMP
using Plasmo
using Logging
using Requires


Logging.configure(level=DEBUG)

## Progressive Hedging file decomposition files
include("D:/Julia_Algorithms/Progressive_Hedging/PHsolve")
include("D:/Julia_Algorithms/Progressive_Hedging/Solution")
include("D:/Julia_Algorithms/Progressive_Hedging/utils")
include("D:/Julia_Algorithms/Progressive_Hedging/PHgetlinkInfo")

#include("C:/Julia_Algorithms/Lagrange Decomposition/lagrangesolve")
#include("C:/Julia_Algorithms/Lagrange Decomposition/Solution")
#include("C:/Julia_Algorithms/Lagrange Decomposition/utils")

# create PLASMO model and solve with PIPS-NLP
graph = ModelGraph()
Plasmo.setsolver(graph, CPLEX.CplexSolver())

# First stage model
cx = [1, 230, 260]
cy = [238, 210]
cw = [170,150,36]


t1 = [1.2  2.5  2.5]
t2 = [3.6  2.4  3]
t3 = [24   16   20]

NS = 3
child_nodes = Array{Plasmo.PlasmoModels.ModelNode}(NS)
probS = [1/3 1/3 1/3]
for s in 1:NS

    bl = Model()
    @variable(bl, x[1:2] >= 0)
    @variable(bl, y[1:2] >= 0)


    @constraint(bl, x[1] + x[2] <= 500) #1 constraint
    @constraint(bl, y[1] + y[2] >= t3[s]) #1 constraint


    @constraint(bl, t1[s]*x[1] + y[1]  >=200) #1 constraint
    @constraint(bl, t2[s]*x[2] + y[2]  >=240) #1 constraint

    @objective(bl, Min, probS[s]*(sum(cy[i]*y[i] for i in 1:2) + sum(cx[i]*x[i] for i in 1:2)))

    child_node = add_node(graph,bl)
    child_nodes[s] = child_node
    if s!=1
        node1 = child_nodes[1]
        @linkconstraint(graph,[i in 1:2], node1[:x][i] == x[i] )
    end
end
ρ = 0.1

#status = solve(graph)
status = PHsolve(graph, probS ,ρ; maxnoimprove = 1, max_iterations = 1000000000000000000)
#getobjectivevalue(graph)
