using CPLEX, JuMP
using Plasmo
using Logging
using Requires


Logging.configure(level=DEBUG)

# Progressive Hedging scripts
include("D:/Julia_Algorithms/Progressive_Hedging/PHsolve")
include("D:/Julia_Algorithms/Progressive_Hedging/utils")
include("D:/Julia_Algorithms/Progressive_Hedging/Solution")
include("D:/Julia_Algorithms/Progressive_Hedging/PHgetlinkInfo")
include("D:/Julia_Algorithms/Progressive_Hedging/slamming")


#include("C:/Julia_Algorithms/Lagrange Decomposition/lagrangesolve")
#include("C:/Julia_Algorithms/Lagrange Decomposition/Solution")
#include("C:/Julia_Algorithms/Lagrange Decomposition/utils")

# create PLASMO model and solve with PIPS-NLP
graph = ModelGraph()
solverID = 1
Plasmo.setsolver(graph, CPLEX.CplexSolver())

# First stage model

NS = 3
child_nodes = Array{Plasmo.PlasmoModels.ModelNode}(NS)
probS = [1/3 1/3 1/3]
#probS = 1
ω1 = [3 2.5 2]
ω2 = [3.6 3 2.4]
ω3 = [24 20 16]

PH = 1
for s in 1:NS

    bl = Model()
    @variable(bl, x[1:3] >= 0)
    @variable(bl, y[1:2] >= 0)
    @variable(bl, w[1:4] >= 0)

    @constraint(bl, x[1]+x[2]+x[3]  <= 500)

    @constraint(bl, ω1[s]*x[1] + y[1] - w[1] >= 200)
    @constraint(bl, ω2[s]*x[2] + y[2] - w[2] >= 240)
    @constraint(bl, w[3] + w[4] <= ω3[s]*x[3])

    @constraint(bl, w[3]  <= 6000)
    if PH == 0
        @objective(bl, Min,  probS[s]*(150*x[1] + 230*x[2] + 260*x[3] + 238*y[1]-170*w[1]+210*y[2]-150*w[2]-36*w[3]-10*w[4]))
    else
        @objective(bl, Min,  150*x[1] + 230*x[2] + 260*x[3] + 238*y[1]-170*w[1]+210*y[2]-150*w[2]-36*w[3]-10*w[4])
    end

    child_node = add_node(graph,bl)
    child_nodes[s] = child_node
    if s > 1
        node1 = child_nodes[s-1]
        @linkconstraint(graph, node1[:x][1] == x[1] )
        @linkconstraint(graph, node1[:x][2] == x[2] )
        @linkconstraint(graph, node1[:x][3] == x[3] )
    end
end
ρ = 5
ρ_vect = ones(3,NS)

if PH == 0
    status = solve(graph)
else
    status = PHsolve(probS, ρ, ρ_vect; ϵ_norm = 0.00001, max_iterations = 500, timelimit=7200, conv_threshold = 50)
end
#
